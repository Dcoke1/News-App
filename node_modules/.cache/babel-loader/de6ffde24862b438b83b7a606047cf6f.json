{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.nextInterval = exports.diffSec = exports.formatDiff = exports.toDate = exports.toInt = void 0;\n/**\n * Created by hustcc on 18/5/20.\n * Contract: i@hust.cc\n */\n\nvar SEC_ARRAY = [60, 60, 24, 7, 365 / 7 / 12, 12];\n/**\n * change f into int, remove decimal. Just for code compression\n * @param f\n * @returns {number}\n */\n\nvar toInt = function toInt(f) {\n  return parseInt(f);\n};\n/**\n * format Date / string / timestamp to Date instance.\n * @param input\n * @returns {*}\n */\n\n\nexports.toInt = toInt;\n\nvar toDate = function toDate(input) {\n  if (input instanceof Date) return input;\n  if (!isNaN(input) || /^\\d+$/.test(input)) return new Date(toInt(input));\n  input = (input || '').trim().replace(/\\.\\d+/, '') // remove milliseconds\n  .replace(/-/, '/').replace(/-/, '/').replace(/(\\d)T(\\d)/, '$1 $2').replace(/Z/, ' UTC') // 2017-2-5T3:57:52Z -> 2017-2-5 3:57:52UTC\n  .replace(/([\\+\\-]\\d\\d)\\:?(\\d\\d)/, ' $1$2'); // -04:00 -> -0400\n\n  return new Date(input);\n};\n/**\n * format the diff second to *** time ago, with setting locale\n * @param diff\n * @param localeFunc\n * @returns {string | void | *}\n */\n\n\nexports.toDate = toDate;\n\nvar formatDiff = function formatDiff(diff, localeFunc) {\n  // if locale is not exist, use defaultLocale.\n  // if defaultLocale is not exist, use build-in `en`.\n  // be sure of no error when locale is not exist.\n  var i = 0,\n      agoin = diff < 0 ? 1 : 0,\n      // timein or timeago\n  total_sec = diff = Math.abs(diff);\n\n  for (; diff >= SEC_ARRAY[i] && i < SEC_ARRAY.length; i++) {\n    diff /= SEC_ARRAY[i];\n  }\n\n  diff = toInt(diff);\n  i *= 2;\n  if (diff > (i === 0 ? 9 : 1)) i += 1;\n  return localeFunc(diff, i, total_sec)[agoin].replace('%s', diff);\n};\n/**\n * calculate the diff second between date to be formatted an now date.\n * @param date\n * @param nowDate\n * @returns {number}\n */\n\n\nexports.formatDiff = formatDiff;\n\nvar diffSec = function diffSec(date, nowDate) {\n  nowDate = nowDate ? toDate(nowDate) : new Date();\n  return (nowDate - toDate(date)) / 1000;\n};\n/**\n * nextInterval: calculate the next interval time.\n * - diff: the diff sec between now and date to be formatted.\n *\n * What's the meaning?\n * diff = 61 then return 59\n * diff = 3601 (an hour + 1 second), then return 3599\n * make the interval with high performance.\n **/\n\n\nexports.diffSec = diffSec;\n\nvar nextInterval = function nextInterval(diff) {\n  var rst = 1,\n      i = 0,\n      d = Math.abs(diff);\n\n  for (; diff >= SEC_ARRAY[i] && i < SEC_ARRAY.length; i++) {\n    diff /= SEC_ARRAY[i];\n    rst *= SEC_ARRAY[i];\n  }\n\n  d = d % rst;\n  d = d ? rst - d : rst;\n  return Math.ceil(d);\n};\n\nexports.nextInterval = nextInterval;","map":{"version":3,"sources":["/Users/CEO/Desktop/Class-Work/CODE2019/News-App/node_modules/timeago.js/lib/utils/date.js"],"names":["Object","defineProperty","exports","value","nextInterval","diffSec","formatDiff","toDate","toInt","SEC_ARRAY","f","parseInt","input","Date","isNaN","test","trim","replace","diff","localeFunc","i","agoin","total_sec","Math","abs","length","date","nowDate","rst","d","ceil"],"mappings":"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","sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.nextInterval = exports.diffSec = exports.formatDiff = exports.toDate = exports.toInt = void 0;\n\n/**\n * Created by hustcc on 18/5/20.\n * Contract: i@hust.cc\n */\nvar SEC_ARRAY = [60, 60, 24, 7, 365 / 7 / 12, 12];\n/**\n * change f into int, remove decimal. Just for code compression\n * @param f\n * @returns {number}\n */\n\nvar toInt = function toInt(f) {\n  return parseInt(f);\n};\n/**\n * format Date / string / timestamp to Date instance.\n * @param input\n * @returns {*}\n */\n\n\nexports.toInt = toInt;\n\nvar toDate = function toDate(input) {\n  if (input instanceof Date) return input;\n  if (!isNaN(input) || /^\\d+$/.test(input)) return new Date(toInt(input));\n  input = (input || '').trim().replace(/\\.\\d+/, '') // remove milliseconds\n  .replace(/-/, '/').replace(/-/, '/').replace(/(\\d)T(\\d)/, '$1 $2').replace(/Z/, ' UTC') // 2017-2-5T3:57:52Z -> 2017-2-5 3:57:52UTC\n  .replace(/([\\+\\-]\\d\\d)\\:?(\\d\\d)/, ' $1$2'); // -04:00 -> -0400\n\n  return new Date(input);\n};\n/**\n * format the diff second to *** time ago, with setting locale\n * @param diff\n * @param localeFunc\n * @returns {string | void | *}\n */\n\n\nexports.toDate = toDate;\n\nvar formatDiff = function formatDiff(diff, localeFunc) {\n  // if locale is not exist, use defaultLocale.\n  // if defaultLocale is not exist, use build-in `en`.\n  // be sure of no error when locale is not exist.\n  var i = 0,\n      agoin = diff < 0 ? 1 : 0,\n      // timein or timeago\n  total_sec = diff = Math.abs(diff);\n\n  for (; diff >= SEC_ARRAY[i] && i < SEC_ARRAY.length; i++) {\n    diff /= SEC_ARRAY[i];\n  }\n\n  diff = toInt(diff);\n  i *= 2;\n  if (diff > (i === 0 ? 9 : 1)) i += 1;\n  return localeFunc(diff, i, total_sec)[agoin].replace('%s', diff);\n};\n/**\n * calculate the diff second between date to be formatted an now date.\n * @param date\n * @param nowDate\n * @returns {number}\n */\n\n\nexports.formatDiff = formatDiff;\n\nvar diffSec = function diffSec(date, nowDate) {\n  nowDate = nowDate ? toDate(nowDate) : new Date();\n  return (nowDate - toDate(date)) / 1000;\n};\n/**\n * nextInterval: calculate the next interval time.\n * - diff: the diff sec between now and date to be formatted.\n *\n * What's the meaning?\n * diff = 61 then return 59\n * diff = 3601 (an hour + 1 second), then return 3599\n * make the interval with high performance.\n **/\n\n\nexports.diffSec = diffSec;\n\nvar nextInterval = function nextInterval(diff) {\n  var rst = 1,\n      i = 0,\n      d = Math.abs(diff);\n\n  for (; diff >= SEC_ARRAY[i] && i < SEC_ARRAY.length; i++) {\n    diff /= SEC_ARRAY[i];\n    rst *= SEC_ARRAY[i];\n  }\n\n  d = d % rst;\n  d = d ? rst - d : rst;\n  return Math.ceil(d);\n};\n\nexports.nextInterval = nextInterval;"]},"metadata":{},"sourceType":"script"}